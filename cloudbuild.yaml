steps:
  - name: "bash"
    id: validate_tfvars
    dir: "tools"
    entrypoint: "bash"
    args:
      [
        "validate_tfvars.sh",
        "${PROJECT_ID}",
        "${LOCATION}",
        "${_ZONE_CODE1}",
        "${_ZONE_CODE2}",
      ]

  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    id: enable_api
    script: |
      gcloud services enable cloudbuild.googleapis.com
      gcloud services enable secretmanager.googleapis.com
      gcloud services enable cloudresourcemanager.googleapis.com
      gcloud services enable iam.googleapis.com
      gcloud services enable compute.googleapis.com

  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    id: binding_cloudbuild_policy
    env:
      - PROJECT_ID=$PROJECT_ID
    script: |
      gcloud_project_number=`gcloud projects list --filter PROJECT_ID=$PROJECT_ID --format="value(projectNumber)"`
      echo gcloud_project_number:$gcloud_project_number

      gcloud_cloudbuild_service_account=$gcloud_project_number@cloudbuild.gserviceaccount.com
      echo gcloud_cloudbuild_service_account:$gcloud_cloudbuild_service_account

      # Notice! do not use owner role in prod site
      gcloud projects add-iam-policy-binding $PROJECT_ID \
          --member=serviceAccount:$gcloud_cloudbuild_service_account \
          --role=roles/owner

  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    id: upload_datadog_secret
    env:
      - DATADOG_API_KEY=$_DATADOG_API_KEY
      - DATADOG_APP_KEY=$_DATADOG_APP_KEY
    script: |
      var1=$(gcloud secrets describe DATADOG_API_KEY 2>/dev/null)
      if [ -z "$var1" ]; then
        echo "DATADOG_API_KEY not exist, create it by gcloud command"
        echo -n ${DATADOG_API_KEY} | gcloud secrets create DATADOG_API_KEY  --data-file=-
      else
        echo "DATADOG_API_KEY exists"
      fi

      var2=$(gcloud secrets describe DATADOG_APP_KEY 2>/dev/null)
      if [ -z "$var2" ]; then
        echo "DATADOG_APP_KEY not exist, create it by gcloud command"
        echo -n ${DATADOG_APP_KEY} | gcloud secrets create DATADOG_APP_KEY  --data-file=-
      else
        echo "DATADOG_APP_KEY exists"
      fi

  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    dir: 'tools'
    entrypoint: 'bash'
    args: ['create_tf_bucket.sh', '${PROJECT_ID}']

  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    dir: 'tools'
    entrypoint: 'bash'
    args: ['prepare_tf_backend.sh', '${PROJECT_ID}']

  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    id: prepare_tfvars
    dir: "tools"
    secretEnv: ["DATADOG_API_KEY", "DATADOG_APP_KEY"] # refer to secrets ONLY in the args field of a build step.
    entrypoint: "bash"
    args:
      ['-c', 'bash prepare_tfvars.sh $LOCATION ${_ZONE_CODE1} ${_ZONE_CODE2} $$DATADOG_API_KEY $$DATADOG_APP_KEY']

  - name: 'gcr.io/migrate-legacy-java-app-gce/packer'
    dir: 'backend/config'
    args:
      - init
      - .

  - name: 'gcr.io/migrate-legacy-java-app-gce/packer'
    dir: 'backend/config'
    args:
      - build
      - -var
      - project_id=$PROJECT_ID
      - -var
      - region=$LOCATION
      - -var
      - zone_code=${_ZONE_CODE1}
      - -var
      - xwiki_img_name=$LOCATION-xwiki-01t-img-$BUILD_ID
      - -var
      - img_desc=XWiki image from Packer which trigger by cloudbuild
      - -var
      - file_sources_tcp=./tcp_gcp.xml
      - -var
      - file_sources_hibernate=./hibernate_gcp.cfg.xml
      - -var
      - file_sources_startup_sh=../tools/xwiki_startup.sh
      - -var
      - deploy_sh=../tools/xwiki_manual_deploy_gcp.sh
      - .

  - name: "hashicorp/terraform"
    dir: "config"
    args:
      - init

  - name: "hashicorp/terraform"
    dir: "config"
    args:
      - apply
      - -var
      - project_id=$PROJECT_ID
      - -var
      - region=$LOCATION
      - -var
      - xwiki_img_name=$LOCATION-xwiki-01t-img-$BUILD_ID
      - -var
      - vm_sa_email=$PROJECT_NUMBER-compute@developer.gserviceaccount.com
      - -var-file=terraform.tfvars
      - -auto-approve

availableSecrets:
  secretManager:
    - versionName: projects/$PROJECT_ID/secrets/DATADOG_API_KEY/versions/latest
      env: "DATADOG_API_KEY"
    - versionName: projects/$PROJECT_ID/secrets/DATADOG_APP_KEY/versions/latest
      env: "DATADOG_APP_KEY"

options:
  logging: CLOUD_LOGGING_ONLY